@using FlashCommon
@using System.Reactive;
@using System.Reactive.Linq
@using CustomExtensions;
@inject IDynamicDB ddb
@inject IJSRuntime JSRuntime;
@inject NavigationManager navMgr;

<link href="css/Navbar.css" rel="stylesheet" />

<div class="navbar">
    <div class="navbar-left">
        <RoundButton Icon="power_settings_new" Click="@LogOff"></RoundButton>
        @LeftContent
    </div>
    <div class="navbar-middle">
        <div class="rowfullcenter">
            <RoundButton Icon="toggle_on" Click="@ToggleDb"></RoundButton>
            <div class="dbname">@DbName</div>
        </div>
        @MiddleContent
    </div>
    <div class="navbar-right">
        @RightContent
    </div>
</div>

@code {
    [Parameter]
    public RenderFragment LeftContent { get; set; }
    [Parameter]
    public RenderFragment MiddleContent { get; set; }
    [Parameter]
    public RenderFragment RightContent { get; set; }

    string DbName;

    protected override Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");
        ddb.CurrentDB.Subscribe(db =>
        {
            DbName = db.Name.Description();
            InvokeAsync(() => StateHasChanged());
        });

        JSCaller.Value<int>(JSRuntime, "flash.utcOffset").Subscribe(minutes =>
        {
        // JS offset is negative relative to the .NET time offset
        int m = (int)TimeZoneInfo.Local.GetUtcOffset(DateTime.Now).TotalMinutes;
            JSTime.ServerOffset = m + minutes;
        });

        return base.OnInitializedAsync();
    }

    public void LogOff()
    {
        JSCaller.Call<User>(JSRuntime, "flash.firebaseLogout").Subscribe(u =>
        {
            ddb.Disconnect();
            navMgr.NavigateTo("/");
        });
    }

    public void ToggleDb()
    {
        ddb.SingleDB.Subscribe(db =>
        {
            DBChange.To(db.Name == DBNames.Azure ? DBNames.Python : DBNames.Azure);
        });
    }
}
