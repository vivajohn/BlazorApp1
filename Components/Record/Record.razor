@using BlazorApp1.Components.PairsPanel
@using BlazorApp1.Components.Navbar
@using BlazorApp1.Components.DeleteButton
@using FlashCommon
@using System.Reactive;
@using System.Reactive.Linq;
@using System.Reactive.Subjects;
@implements IDisposable
@inject IDynamicDB ddb;
@inject IJSRuntime JSRuntime;

<link href="css/Record.css" rel="stylesheet" />

<Navbar>
    @*<LeftContent>
        </LeftContent>
        <MiddleContent>
        </MiddleContent>*@
    <RightContent>
        <RoundButton Icon="add" Click="@(() => OnAddDeck())"></RoundButton>
        <a href="/player">
            <RoundButton Icon="record_voice_over"></RoundButton>
        </a>
    </RightContent>
</Navbar>

@if (topic != null)
{
    <MatAccordion>

        @foreach (var deck in topic.decks)
        {
            <MatExpansionPanel Class="outerpanel" Expanded="@(idOpen == deck.id)" ExpandedChanged="@(e => OnDeckOpen(e, deck))">
                <MatExpansionPanelSummary>
                    <div class="header">
                        <div class="header-text" @onclick:stopPropagation="true">
                            <MatTextField Value=@deck.name
                                          Label="@(@String.IsNullOrEmpty(deck.name) ? "Deck name..." : null)"
                                          OnInput="@(e => TextChanged(e, deck))"></MatTextField>
                        </div>
                    </div>
                    <div class="icons">
                        @if (deck.groups != null && idOpen == deck.id)
                        {
                            @*<RoundButton Icon="cloud_upload"></RoundButton>*@
                            <DeleteButton Disabled="@(deck.groups.Count > 0)" Delete="@(() => DeleteDeck(deck))"></DeleteButton>
                            <RoundButton Icon="add" Click="@(() => OnAddPrompt(deck))"></RoundButton>
                        }
                    </div>
                </MatExpansionPanelSummary>
                <MatExpansionPanelDetails>
                    @if (deck.groups != null)
                    {
                        @foreach (var pair in deck.groups)
                        {
                            <PairsPanel Pair=@pair Delete="@(e => DeletePair(deck, pair))" IsOpen="@(deck.groups.Count == 1)"></PairsPanel>
                        }
                    }
                </MatExpansionPanelDetails>
            </MatExpansionPanel>
        }

    </MatAccordion>
}

@code {
    Topic topic;
    long idOpen = -1;
    private ReplaySubject<string> oText = new ReplaySubject<string>(0);
    private IDisposable subscription;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override void OnInitialized()
    {
        // TO DO: look at using .NET authorization to redirect urls
        if (!ddb.IsConnected)
        {
            JSRuntime.InvokeAsync<Unit>("flash.reload", null);
            return;
        }
        base.OnInitialized();
        subscription = ddb.CurrentDB.Subscribe(db =>
        {
            idOpen = -1;
            topic = null;
            //InvokeAsync(() => StateHasChanged());
            db.CurrentUserId.Subscribe(uid =>
            {
                db.GetTopics(uid).Subscribe(topics =>
                {
                    if (topics.Count > 0)
                    {
                        topic = topics[0];
                        if (topic.decks.Count == 1)
                        {
                            OnDeckOpen(true, topic.decks[0]);
                        }
                        InvokeAsync(() => StateHasChanged());
                    }
                });
            });
        });
        oText.Throttle(new TimeSpan(0, 0, 0, 1)).Subscribe(text =>
        {
            ddb.SingleDB.Subscribe(db => db.SaveTopic(topic).Subscribe());
        });
    }

    public void Dispose()
    {
        subscription.Dispose();
    }

    void TextChanged(ChangeEventArgs e, Deck deck)
    {
        deck.name = e.Value.ToString();
        oText.OnNext(e.Value.ToString());
    }

    void OnDeckOpen(bool open, Deck deck)
    {
        if (open)
        {
            idOpen = deck.id;
        }
        else if (idOpen == deck.id)
        {
            idOpen = 0;
        }
        if (deck.groups == null)
        {
            ddb.SingleDB.Subscribe(db =>
            {
                db.CurrentUserId.FirstAsync().Subscribe(uid =>
                {
                    db.GetPairs(uid, deck).Subscribe(pairs => InvokeAsync(() => StateHasChanged()));
                });
            });
        }
    }

    void OnAddDeck()
    {
        ddb.SingleDB.Subscribe(db =>
        {
            topic.AddDeck();
            db.SaveTopic(topic).Subscribe(_ => InvokeAsync(() => StateHasChanged()));
        });
    }

    void OnAddPrompt(Deck deck)
    {
        ddb.SingleDB.Subscribe(db =>
        {
            var pair = topic.CreatePromptResponsePair(deck);
            db.SavePromptPair(pair).Subscribe(_ => InvokeAsync(() => StateHasChanged()));
        });
    }

    void DeleteDeck(Deck deck)
    {
        ddb.SingleDB.Subscribe(db =>
        {
            topic.decks.Remove(deck);
            db.SaveTopic(topic).Subscribe(_ => InvokeAsync(() => StateHasChanged()));
        });
    }

    void DeletePair(Deck deck, PromptResponsePair pair)
    {
        ddb.SingleDB.Subscribe(db =>
        {
            var o = new List<IObservable<Unit>>();
            o.Add(db.DeletePair(pair));
            if (pair.prompts[0].id > 0)
            {
                o.Add(db.DeleteBlob(pair.uid, pair.prompts[0]));
            }
            if (pair.prompts[1].id > 0)
            {
                o.Add(db.DeleteBlob(pair.uid, pair.prompts[1]));
            }
            Observable.Merge(o).LastAsync().Subscribe(r =>
            {
                deck.groups.Remove(pair);
                InvokeAsync(() => StateHasChanged());
            });
        });
    }
}
