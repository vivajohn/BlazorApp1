@using BlazorApp1.Components.Navbar
@using System.Reactive;
@using System.Reactive.Linq;
@using FlashCommon
@using System.Reactive.Threading.Tasks;
@inject NavigationManager navMgr;
@inject IJSRuntime JSRuntime;
@inject IDynamicDB ddb;

<link href="css/Play.css" rel="stylesheet" />

<div class="play">
    <Navbar>
        @*<LeftContent>
            </LeftContent>
            <MiddleContent>
            </MiddleContent>*@
        <RightContent>
            <a href="/recorder" class="navlink">
                <RoundButton Icon="mic"></RoundButton>
            </a>
        </RightContent>
    </Navbar>

    <div class="play-panel">
        <div class="play-panel-content">
            <div class="play-panel-content-circle @(IsLoading ? "play-panel-content-circle-spin" : "")">
                <img src="assets/voice.svg">
            </div>

            @if (urls != null && !NextTime.HasValue)
            {
                <div class="play-panel-content-buttons">
                    <div class="play-panel-content-buttons-top">
                        <RoundButton Icon="play_arrow" Big="true" Disabled="@(IsPlaying || IsLoading)" Click="@(() => PlayPrompt(0))"></RoundButton>
                        <RoundButton Icon="play_arrow" Big="true" Disabled="@(IsPlaying || IsLoading)" Click="@(() => PlayPrompt(1))"></RoundButton>
                    </div>
                    <div class="play-panel-content-buttons-bottom">
                        <RoundButton Icon="thumb_down" Big="true" Disabled="@(IsPlaying || IsLoading)" Click="@(() => UpdateCard(false))"></RoundButton>
                        <RoundButton Icon="thumb_up" Big="true" Disabled="@(IsPlaying || IsLoading)" Click="@(() => UpdateCard(true))"></RoundButton>
                    </div>

                </div>
            }
            @if (!IsLoading && urls == null)
            {
        <div class="play-panel-empty">
            <!-- DO TO: play-panel-icon uses mixin which was made for iconbutton not maticon -->
            <MatIcon Icon="mic"></MatIcon>
            <span>Make some recordings...</span>
        </div>
            }
            @if (NextTime.HasValue)
            {
                <div class="play-panel-time">
                    <MatIcon Class="play-panel-icon" Icon="timer"></MatIcon>
                    <div>@NextTime.Value.ToString()</div>
                </div>
            }

        </div>
    </div>

</div>

@code {
    private PlaybackMgr mgr;
    private string[] urls = null;
    private bool IsPlaying = false;
    private bool IsLoading = true;
    private DateTime? NextTime;

    MatTheme theme1 = new MatTheme()
    {
        Primary = "#ffeb3b",
        Secondary = "transparent"
    };

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ddb.CurrentDB.Subscribe(db =>
            {
                mgr = new PlaybackMgr(Globals.uid, db);
                mgr.IsLoading.Subscribe(loading =>
                {
                    IsLoading = loading;
                    InvokeAsync(() => StateHasChanged());
                });
                mgr.Recordings.Subscribe(blobs =>
                {
                    // Formats the blob data for playback on an HTML media element
                    if (blobs == null)
                    {
                        Task.Delay(3500).ToObservable().Subscribe(_ => navMgr.NavigateTo("/recorder"));
                    }
                    else
                    {
                        urls = new string[2];
                        urls[0] = $"data:{blobs[0].blobType};base64,{blobs[0].data64}";
                        urls[1] = $"data:{blobs[1].blobType};base64,{blobs[1].data64}";
                    }
                    NextTime = null;
                    IsLoading = false;
                    InvokeAsync(() => StateHasChanged());
                });
            });
        }
    }

    void PlayPrompt(int index)
    {
        this.IsPlaying = true;
        // Plays back a blob on an HTML media element
        JSCaller.Call<Unit>(JSRuntime, "PlayerService.playUrl", urls[index]).Subscribe(u =>
        {
            System.Diagnostics.Debug.WriteLine("End playing");
            this.IsPlaying = false;
            InvokeAsync(() => StateHasChanged());
        });
    }


    // Used by UpdateCard only
    //private class NextDate { public int index { get; set; } public long date { get; set; }};

    // With the current prompt, update its next playback time and its time interval.
    // Move on to the next prompt.
    void UpdateCard(bool success)
    {
        NextTime = mgr.NextCard(success);
    }
}
