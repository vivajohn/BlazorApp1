@using BlazorApp1.Components.Navbar
@using System.Threading;
@using BlazorApp1.Data;
@inject IJSRuntime JSRuntime;
@inject IUser user;
@inject IFirebase fb;

<link href="css/Play.css" rel="stylesheet" />

<div class="play">
    <Navbar>
        @*<LeftContent>
            <span> Left...</span>
        </LeftContent>
        <MiddleContent>
            Mid
        </MiddleContent>*@
        <RightContent>
            <a href="/record" class="navlink">
                <RoundButton Icon="record_voice_over"></RoundButton>
            </a>
        </RightContent>
    </Navbar>

    <div class="play-panel">
        <div class="play-panel-content">
            <div class="play-panel-content-circle">
                <img src="assets/voice.svg" alt="Kiwi standing on oval">
            </div>

            @if (recordings != null)
            {
                <div class="play-panel-content-buttons">
                    <div class="play-panel-content-buttons-top">
                        <RoundButton Icon="play_arrow" Big="true" Click="@(() => PlayPrompt(0))"></RoundButton>
                        <RoundButton Icon="play_arrow" Big="true" Click="@(() => PlayPrompt(1))"></RoundButton>
                    </div>
                    <div class="play-panel-content-buttons-bottom">
                        <RoundButton Icon="thumb_down" Big="true" Click="@(() => UpdateCard(false))"></RoundButton>
                        <RoundButton Icon="thumb_up" Big="true" Click="@(() => UpdateCard(true))"></RoundButton>
                    </div>
                </div>
            }

        </div>
    </div>

</div>

@code {
    private List<PromptResponsePair> pairs;
    private object[] recordings = new object[2];
    private int currentIndex = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Read the list of active prompt-response pairs
            pairs = await fb.GetCurrentPairs(user);
            setRecordings();
            StateHasChanged();
        }
    }

    async void PlayPrompt(int index)
    {
        await JSRuntime.InvokeAsync<Dictionary<string, object>>("flash.playUrl", recordings[index]);
    }

    // With the current prompt, update its next playback time and its time interval.
    // Move on to the next prompt.
    async void UpdateCard(bool success)
    {
        var pair = pairs[currentIndex];
        var nextInfo = await JSRuntime.InvokeAsync<long[]>("flash.nextDate", pair.interval, success);
        pair.interval = (int)nextInfo[0];
        pair.nextDate = nextInfo[1];

        currentIndex = (currentIndex + 1) % pairs.Count;
        setRecordings();
    }

    // Read the pair of recordings for the current prompt
    private async void setRecordings()
    {
        var prompts = pairs[currentIndex].prompts;
        recordings[0] = await getRecording(prompts[0]);
        recordings[1] = await getRecording(prompts[1]);
    }

    // Get the audio for one of the prompts. The recording is in the
    // Firestore blob format, and must be modified in Javascript for
    // use with the audio tag.
    private async Task<object> getRecording(Prompt prompt)
    {
        var blobData = await fb.GetRecording(user, prompt);
        var recording = await JSRuntime.InvokeAsync<string>("flash.makeBlob", blobData.blobType, blobData.data);
        return recording;
    }
}
