@using BlazorApp1.Components.Navbar
@using System.Text.Json;
@using System.Reactive.Threading.Tasks;
@using System.Reactive.Linq;
@using FlashCommon
@inject IJSRuntime JSRuntime;
@inject IDynamicDB ddb;

<link href="css/Play.css" rel="stylesheet" />

<div class="play">
    <Navbar>
        @*<LeftContent>
                <span> Left...</span>
            </LeftContent>
            <MiddleContent>
                Mid
            </MiddleContent>*@
        <RightContent>
            <a href="/recorder" class="navlink">
                <RoundButton Icon="mic"></RoundButton>
            </a>
        </RightContent>
    </Navbar>

    <div class="play-panel">
        <div class="play-panel-content">
            <div class="play-panel-content-circle">
                <img src="assets/voice.svg">
            </div>

            @if (mgr != null && mgr.Recordings != null)
            {
                <div class="play-panel-content-buttons">
                    <div class="play-panel-content-buttons-top">
                        <RoundButton Icon="play_arrow" Big="true" Click="@(() => PlayPrompt(0))"></RoundButton>
                        <RoundButton Icon="play_arrow" Big="true" Click="@(() => PlayPrompt(1))"></RoundButton>
                    </div>
                    <div class="play-panel-content-buttons-bottom">
                        <RoundButton Icon="thumb_down" Big="true" Click="@(() => UpdateCard(false))"></RoundButton>
                        <RoundButton Icon="thumb_up" Big="true" Click="@(() => UpdateCard(true))"></RoundButton>
                    </div>
                </div>
            }

        </div>
    </div>

</div>

@code {
    private PlaybackMgr mgr;
    private string[] urls = new string[2];

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ddb.CurrentDB.Subscribe(db =>
            {
                mgr = new PlaybackMgr(Globals.uid, db);
                mgr.Recordings.Subscribe(blobs =>
                {
                    // Formats the blob data for playback on an HTML media element
                    urls[0] = $"data:{blobs[0].blobType};base64,{blobs[0].data.ToBase64()}";
                    urls[1] = $"data:{blobs[1].blobType};base64,{blobs[1].data.ToBase64()}";
                });
            });

            StateHasChanged();
        }
    }

    void PlayPrompt(int index)
    {
        // Plays back a blob on an HTML media element (see util.js in this project)
        JSRuntime.InvokeAsync<Dictionary<string, object>>("flash.playUrl", urls[index]);
    }


    // Used by UpdateCard only
    //private class NextDate { public int index { get; set; } public long date { get; set; }};

    // With the current prompt, update its next playback time and its time interval.
    // Move on to the next prompt.
    void UpdateCard(bool success)
    {
        var dbug = mgr.CurrentPair;
        mgr.NextCard(success);
        System.Diagnostics.Debug.WriteLine($"{dbug.id}: {dbug.interval}, {dbug.nextDate}");
        //var pair = mgr.CurrentPair;
        //var t = JSRuntime.InvokeAsync<NextDate>("Intervals.next", pair.interval, success).AsTask();
        //t.ToObservable().Subscribe(nextInfo =>
        //{
        //    pair.interval = nextInfo.index;
        //    pair.nextDate = nextInfo.date;
        //});
    }
}
